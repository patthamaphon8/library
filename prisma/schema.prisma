generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  firstName    String   @db.VarChar(255)
  lastName     String   @db.VarChar(255)
  username     String   @db.VarChar(255)
  password     String   @db.VarChar(255)
  birthDate    String   @db.VarChar(255)
  phoneNumber  String   @unique @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  isApprove    Boolean?
  isSuperAdmni Boolean  @default(false)
}

model User {
  id                Int                 @id @default(autoincrement())
  firstName         String              @db.VarChar(255)
  lastName          String              @db.VarChar(255)
  phoneNumber       String              @unique @db.VarChar(255)
  borrowTransaction BorrowTransaction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
}

model Book {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  category  String     @db.VarChar(255)
  image     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  copies    BookCopy[] // ความสัมพันธ์ไปยังเล่มจริง
}

model BookCopy {
  id                Int                 @id @default(autoincrement())
  bookId            Int
  status            CopyStatus          @default(AVAILABLE)
  code              String              @unique // รหัสประจำเล่ม เช่น BARCODE
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  book              Book                @relation(fields: [bookId], references: [id])
  borrowTransaction BorrowTransaction[]
}

enum CopyStatus {
  AVAILABLE //พร้อมให้ยืม
  BORROWED //ถูกยืมอยู่
  LOST //สูญหาย
  DAMAGED //เสียหาย
}

model BorrowTransaction {
  id         Int          @id @default(autoincrement())
  userId     Int
  bookCopyId Int
  borrowedAt DateTime     @default(now()) // วันที่ยืม
  dueDate    DateTime // กำหนดวันคืน
  returnedAt DateTime? // วันที่คืน (nullable)
  status     BorrowStatus @default(BORROWED)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  bookCopy BookCopy @relation(fields: [bookCopyId], references: [id])
}

enum BorrowStatus {
  BORROWED // กำลังยืม
  RETURNED // คืนแล้ว
  OVERDUE // เลยกำหนด
  LOST // หาย (เช่น user ทำหาย)
}
